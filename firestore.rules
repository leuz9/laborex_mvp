rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    function isSuperAdmin() {
      return isAuthenticated() && getUserData().role == 'superadmin';
    }

    function isAdmin() {
      return isAuthenticated() && (getUserData().role == 'admin' || getUserData().role == 'superadmin');
    }

    function hasPermission(permission) {
      return isAuthenticated() && (
        getUserData().permissions.hasAny([permission]) || 
        getUserData().role == 'superadmin'
      );
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isTeamMember(teamId) {
      return isAuthenticated() && getUserData().teamId == teamId;
    }
    
    function isViewer() {
      return isAuthenticated() && getUserData().role == 'viewer';
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        isAdmin() ||
        hasPermission('manage_users')
      );
      allow create: if isSuperAdmin();
      allow create: if true;  // Permettre la création de compte
      allow update: if isAuthenticated() && (
        (isOwner(userId) && request.resource.data.role == resource.data.role) || 
        isSuperAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection feedback
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated() && (
        resource.data.from.id == request.auth.uid ||
        resource.data.to.id == request.auth.uid ||
        (!resource.data.private && (hasPermission('view_feedback') || hasRole('viewer'))) ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.resource.data.from.id == request.auth.uid ||
        hasPermission('submit_feedback') ||
        hasRole('viewer') ||
        hasPermission('manage_feedback')
      );
      allow update: if isAuthenticated() && (
        (resource.data.from.id == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['reactions'])) ||
        hasPermission('manage_feedback') ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        hasPermission('send_notifications') ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['read', 'readAt'])
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Règles pour la collection tasks
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        hasPermission('manage_tasks') || 
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        hasPermission('manage_tasks') || 
        request.auth.uid in resource.data.assignees.id || 
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection products
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        hasPermission('manage_products') || 
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        hasPermission('manage_products') || 
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection teamMembers
    match /teamMembers/{memberId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        hasPermission('manage_team') || 
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        hasPermission('manage_team') || 
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

     // Règles pour la collection gamification
    match /gamification/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) ||
        hasPermission('view_gamification') ||
        isAdmin() ||
        isViewer() 
      );
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (
        isOwner(userId) ||
        hasPermission('manage_gamification') ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection achievements
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        hasPermission('manage_achievements') ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection badges
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        hasPermission('manage_badges') ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection wellnessSurveys
    match /wellnessSurveys/{surveyId} {
      allow read: if isAuthenticated() && (
        resource.data.employeeId == request.auth.uid ||
        hasPermission('manage_wellness') ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.resource.data.employeeId == request.auth.uid ||
        hasPermission('manage_wellness')
      );
      allow update: if isAuthenticated() && (
        resource.data.employeeId == request.auth.uid ||
        hasPermission('manage_wellness') ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }

    // Règles pour la collection careerDevelopment
    match /careerDevelopment/{developmentId} {
      allow read: if isAuthenticated() && (
        resource.data.employeeId == request.auth.uid ||
        hasPermission('manage_career') ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.resource.data.employeeId == request.auth.uid ||
        hasPermission('manage_career')
      );
      allow update: if isAuthenticated() && (
        resource.data.employeeId == request.auth.uid ||
        hasPermission('manage_career') ||
        isAdmin()
      );
      allow delete: if isSuperAdmin();
    }
  }
}